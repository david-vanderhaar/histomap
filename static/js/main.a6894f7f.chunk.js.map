{"version":3,"sources":["logo.svg","lib/helper.js","lib/generators/state.js","lib/turchin_cycling.js","Histomap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getRandomIntInclusive","min","max","Math","ceil","floor","random","getRandomInArray","array","length","RESOURCE_BASELINE_DEVIATION","GRID_SIZE","NEIGHBOR_DISTANCE","run","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","polities","steps_to_run","step_interval","i","_args","arguments","wrap","_context","prev","next","undefined","console","log","concat","map","polity","makeDecision","delay","abrupt","stop","_x","_x2","apply","this","generatePolities","amount","push","createPolity","electChief","all_polities","forEach","id","chief_age","upkeep","has_died","name","hasChiefDied","subordinates","getImmediateSubordinates","amount_to_secede","s","secede","dismantlePolity","chief","victim","findWeakestNeighborPolity","willGoToWar","goToWar","havePeace","chief_polity","getChiefPolity","willSecede","attemptRebellion","neighbor_chiefs","getNeighborCommunities","filter","c","immuneToViolence","sort","b","getPower","isInRangeOfChiefOrSubordinates","toConsumableArray","getAllSubordinates","reduce","acc","curr","hypot","coordinates","x","y","reorganizeInternalPolities","annex_pairs","target","pair","has_incurred_secession","has_incurred_war","neighbor","P","probabilityOfSuccessfulAttack","costOfSuccessfulAttack","probabilityPolityWillAttack","subordinate","probability_to_repel_attack","probability_of_successful_attack","attackRepelled","decreaseResourceBy","costOfUnsuccessfulAttack","increaseResourceBy","sign","baseline_resource_level","resource_level","attacker","defender","target_community","neighbor_communities","findWealthiestBorderCommunity","target_subordinate_ids","t","indexOf","annexTarget","p1","pow","cost_of_successful_attack","exp","value","ids","result","uuid","composeName","namePrefixes","nameSuffixes","color","Konva","Util","getRandomColor","list","join","Histomap","state","Cycling","offset_x","window","innerWidth","offset_y","innerHeight","base_size","size_multiplier","table","setState","_this2","chief_pos_x","chief_pos_y","power","size","subordinate_lines","react_default","createElement","ReactKonva","key","points","stroke","tension","strokeWidth","text","fill","fontSize","round","width","height","shadowBlur","onClick","step","React","Component","App","className","src_Histomap","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6894f7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.43f13564.svg\";","export function getRandomIntInclusive (min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getRandomInArray (array) {\n  return array.length > 0 \n    ? array[getRandomIntInclusive(0, array.length - 1)]\n    : null\n}","import uuid from 'uuid/v1';\nimport * as Helper from '../helper';\n\n\nconst TRAIT_MIN = 0;\nconst TRAIT_MAX = 10;\n\nexport function createEntity() {\n  let entity = {\n    id: uuid(),\n    name: composeName([namePrefixes, nameSuffixes]),\n    level: Helper.getRandomIntInclusive(1, 5),\n    militaryPower: Helper.getRandomIntInclusive(1, 5),\n    economicPower: Helper.getRandomIntInclusive(1, 5),\n  }\n  return entity;\n}\n\nconst namePrefixes = [\n  'Moon',\n  'Sun',\n  'Black',\n  'White',\n  'Light',\n  'Shadow',\n  'Red',\n  'Green',\n  'Gray',\n  'Mighty',\n  'Wither',\n  'Gale',\n  'Hay',\n  'Stone',\n  'River',\n]\n\nconst nameSuffixes = [\n  'Fire',\n  'Water',\n  'Belly',\n  'Peaks',\n  'Born',\n  'Still',\n  'Wood',\n  'Wine',\n  'Run',\n  'Guard',\n  'Fell',\n  'Fall',\n]\n\nconst composeName = (namePartLists = []) => {\n  return namePartLists.map((list) => Helper.getRandomInArray(list)).join(' ')\n}\n","import { getRandomIntInclusive, getRandomInArray } from \"./helper\";\nimport uuid from 'uuid/v1';\nimport { delay } from \"q\";\nimport Konva from 'konva';\n\n/*\n----------------------\n      VARIABLES\n----------------------\nMajor model parameters and statistics\nS = System edge size\nMILITARY_DETERMINISM = Scaling exponent (of the polity power to the probability of a win)\nRESOURCE_BASELINE_DEVIATION = Standard deviation of the baseline resource level\nTRIBUTE_LEVEL = Tribute level\nWILLINGNESS_TO_ATTACK = a variable > 0\nMAX_CONTROL = Span of control (the maximum number of subordinate polities)\nCHIEF_LIFE_EXPECTANCY = The expected time in power of the paramount chief\nmax_s = Relative size of the largest polity\nc = Mean complexity\nmax_c = Maximum complexity\nρ = Average centrality (i.e. the ratio of the power of the chief village and the one immediately below)\n\nCustom model parameters\nN = initial number of polities to create\nC = max number of connection to other nodes\nY = number of time steps to run\ntime_step = current step in time\n\n----------------------\n      TODO's\n----------------------\nDONE - There is a chance t every time_step that the paramount chief dies, \nresulting in peacful annexation of a random set of subordinate polities\n\nDONE - if a polity has been warred against or seceded from, they can not be a target for war until the next year.\n\nwhen polities secede, they should acquire a portion of the resources of the chief polity (MAYBE)\n\nDONE - when polity id captured, if it has subordinates, they should become independant\n\nDONE - find neighbors to attack should target any polities with range of current chief and any of their subordinates\n\nDONE - BUG - nest goToWar function uses undefined target\n\n*/\n\nconst TRIBUTE_LEVEL = 0.5 // Math.random();\nconst LOSER_EFFECT = 0.2 // Math.random();\nconst CHIEF_LIFE_EXPECTANCY = 100;\nconst MAX_CONTROL = 4;\nconst RESOURCE_BASELINE_DEVIATION = 0.2 //Math.random();\nconst MILITARY_DETERMINISM = 2 //getRandomIntInclusive(1, 2);\nconst WILLINGNESS_TO_ATTACK = 2\nconst RESOURCE_RECOVERY_TIME =  3 //getRandomIntInclusive(5, 15);\nconst GRID_SIZE = 100\n// const NEIGHBOR_DISTANCE = GRID_SIZE\nconst NEIGHBOR_DISTANCE = GRID_SIZE / 3\n\nexport const run = async (polities, steps_to_run, step_interval = 0) => {\n  for (let i = 0; i < steps_to_run; i++) {\n    console.log(`%cTIME_STEP: ${i}`, \"color: yellow; font-style: italic; background-color: blue;padding: 2px\");\n    polities\n    // .filter((polity) => polity.chief === null)\n    .map((polity) => makeDecision(polity, polities));\n    await delay(step_interval);\n  }\n  \n  return polities;  \n}\n\nexport const generatePolities = (amount) => {\n  let polities = [];\n  for (let i = 0; i < amount; i++) {\n    polities.push(createPolity());\n  }\n  return polities;\n}\n\nconst hasChiefDied = (polity) => {\n  const has_died = Math.random() <= (polity.chief_age / CHIEF_LIFE_EXPECTANCY) - 0.3\n  has_died && console.log(`DEATH: ${polity.name}'s Chief has died`)\n  return has_died;\n}\n\nconst generateChiefAge = () => getRandomIntInclusive(12, 45);\n\nconst electChief = (polity, all_polities) => {\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      p.chief_age = generateChiefAge();\n    }\n  });\n}\n\nconst dismantlePolity = (polity, all_polities) => {\n  const subordinates = getImmediateSubordinates(polity, all_polities)\n  const amount_to_secede = getRandomIntInclusive(0, subordinates.length);\n  console.log(`DISMANTLE: ${amount_to_secede} communities have decided to leave ${polity.name}.`)\n  subordinates.map((s, i) => {\n    if (i <= amount_to_secede - 1) {\n      secede(s, all_polities);\n    }\n  })\n}\n\nconst makeDecision = (polity, all_polities) => {\n  upkeep(polity, all_polities);\n  if (hasChiefDied(polity, all_polities)) {\n    dismantlePolity(polity, all_polities);\n    electChief(polity, all_polities);\n  } else {\n    // consider allowing all polities that have subs, make this decision\n    if (polity.chief === null) {\n      console.log('DECISION: ', `The chief polity ${polity.name} deliberates`)\n      let victim = findWeakestNeighborPolity(polity, all_polities)\n      if (victim && willGoToWar(polity, victim, all_polities)) {\n        goToWar(polity, victim, null, all_polities)\n      } else {\n        havePeace(polity, all_polities);\n      }\n    } else {\n      // rebelling polities rebel against immediate chief\n      // const chief_polity = getImmediateChief(polity, all_polities);\n  \n      // rebelling polities rebel against paramount chief\n      const chief_polity = getChiefPolity(polity, all_polities);\n      console.log('DECISION: ', `${chief_polity.name}'s subordinate polity ${polity.name} deliberates`)\n      if (willSecede(chief_polity, polity, all_polities)) {\n        attemptRebellion(chief_polity, polity, all_polities);\n      } else {\n        havePeace(polity, all_polities);\n      }\n    }\n  }\n\n  return polity;\n}\n\nconst findWeakestNeighborPolity = (polity, all_polities) => {\n  let neighbor_communities = getNeighborCommunities(polity, all_polities)\n    .filter((c) => !immuneToViolence(c))\n    // .filter((c) => !c.has_incurred_secession)\n  \n  const neighbor_chiefs = \n    neighbor_communities\n    .map((p) => getChiefPolity(p, all_polities))\n    .sort((a, b) => getPower(a, all_polities) - getPower(b, all_polities))\n  \n  return neighbor_chiefs.length > 0 ? neighbor_chiefs[0] : false;\n}\n\nconst isInRange = (a, b) => {\n  return (\n    NEIGHBOR_DISTANCE >= Math.hypot(\n      b.coordinates.x - a.coordinates.x,\n      b.coordinates.y - a.coordinates.y\n    )\n  )\n}\n\nlet isInRangeOfChiefOrSubordinates = (chief, victim, all_polities) => {\n  return (\n    [\n      chief,\n      ...getAllSubordinates(chief, all_polities)\n    ].reduce((acc, curr) => acc + isInRange(victim, curr),\n      0\n    )\n  )\n}\n\nconst getNeighborCommunities = (polity, all_polities) => {\n  return all_polities.filter((p) => {\n    return (\n      getChiefPolity(p, all_polities).id !== polity.id\n      && p.id !== polity.id\n      && isInRangeOfChiefOrSubordinates(polity, p, all_polities)\n    );\n  });\n}\n\nconst findWealthiestBorderCommunity = (attacker, defender, all_polities) => {\n  // need to account for adjacency\n  let neighbor_communities = []\n\n  if (getAllSubordinates(defender, all_polities).length > 0) {\n    neighbor_communities =\n      getNeighborCommunities(attacker, all_polities)\n      .filter((p) => getChiefPolity(p, all_polities).id === defender.id)\n      .sort((a, b) => getPower(b, all_polities) - getPower(a, all_polities))\n  } else {\n    // neighbor_communities = [defender]\n    neighbor_communities =\n      getNeighborCommunities(attacker, all_polities)\n      .filter((p) => p.id === defender.id)\n  }\n\n  return neighbor_communities.length > 0 ? neighbor_communities[0] : false;\n}\n\nconst reorganizeInternalPolities = (chief, all_polities) => {\n  let annex_pairs = [];\n  const subordinates = getAllSubordinates(chief, all_polities)\n    .sort((a, b) => getPower(b, all_polities) - getPower(a, all_polities))\n  if (subordinates.length > MAX_CONTROL) {\n    subordinates.map((s, i) => {\n      if (i >= MAX_CONTROL) {\n        annex_pairs.push({ chief: subordinates[i - MAX_CONTROL], target: s})\n      } else {\n        annex_pairs.push({chief, target: s})\n      }\n    })\n  }\n  annex_pairs.map((pair) => {\n    all_polities.forEach(p => {\n      if (p.id === pair.target.id) {\n        p.chief = pair.chief.id\n      }\n    })\n  })\n}\n\nconst annexTarget = (chief, target, all_polities) => {\n  console.log('ANNEX: ', `${target.name} is annexed by ${chief.name}.`);\n  const target_subordinate_ids = getImmediateSubordinates(target, all_polities).map((t) => t.id);\n  all_polities.forEach(p => {\n    if (p.id === target.id) {\n      p.chief = chief.id\n    }\n    // immediate subordinates of target polity should become free\n    if (target_subordinate_ids.indexOf(p.id) > -1) {\n      p.chief = null\n    }\n  });\n}\n\nconst secede = (polity, all_polities) => {\n  const chief = getChiefPolity(polity, all_polities);\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      console.log(`SECESSION: ${p.name} is seceded from ${chief.name}.`)\n      p.chief = null;\n    } else if (p.id === chief.id) {\n      p.has_incurred_secession = true;\n    }\n  });\n}\n\nconst upkeep = (polity, all_polities) => {\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      p.has_incurred_secession = false;\n      p.has_incurred_war = false;\n      p.chief_age += 1;\n    }\n  });\n}\n\nconst willGoToWar = (polity, neighbor, all_polities) => {\n  const P = probabilityOfSuccessfulAttack(polity, neighbor, all_polities);\n  const c = costOfSuccessfulAttack(P);\n  return Math.random() <= probabilityPolityWillAttack(polity, P, c);\n}\n\nconst willSecede = (chief, subordinate, all_polities) => {\n  // console.log(subordinate);\n  const probability_to_repel_attack = 1 - probabilityOfSuccessfulAttack(chief, subordinate, all_polities)\n  return Math.random() <= probability_to_repel_attack;\n}\n\nconst attemptRebellion = (chief, subordinate, all_polities) => {\n  console.log('REBELLION: ', `${subordinate.name} attempts rebellion against ${chief.name}.`);\n  let probability_of_successful_attack = probabilityOfSuccessfulAttack(chief, subordinate, all_polities)\n  let probability_to_repel_attack = 1 - probability_of_successful_attack\n  const rebellion_succeeds = attackRepelled(probability_to_repel_attack)\n  if (rebellion_succeeds) {\n    console.log('REBELLION: ', `${subordinate.name} succeeds.`);\n    decreaseResourceBy(\n      costOfUnsuccessfulAttack(probability_of_successful_attack),\n      [\n        chief.id, \n        subordinate.id\n      ],\n      all_polities\n    )\n    secede(subordinate, all_polities);\n    // reorganizeInternalPolities(chief, all_polities)\n    reorganizeInternalPolities(getChiefPolity(chief), all_polities)\n  } else {\n    console.log('REBELLION: ', `${subordinate.name} fails.`);\n    decreaseResourceBy(\n      costOfSuccessfulAttack(probability_of_successful_attack),\n      [\n        chief.id, \n        subordinate.id\n      ],\n      all_polities\n    )\n  }\n}\n\nconst havePeace = (polity, all_polities) => {\n  console.log('PEACE: ', `${polity.name} has peace.`);\n  increaseResourceBy(\n    Math.sign(polity.baseline_resource_level - polity.resource_level) * (polity.baseline_resource_level / RESOURCE_RECOVERY_TIME),\n    [polity.id],\n    all_polities\n  )\n}\n\nconst goToWar = (attacker, defender, probability_to_repel_attack = null, all_polities) => {\n  let target_community = findWealthiestBorderCommunity(attacker, defender, all_polities);\n  if (!target_community) {\n    console.log(`IMPASSE: ${defender.name} has no communities with reach of ${attacker.name}'s assualt.`);\n  } else {\n    console.log('WAR: ', `${attacker.name} prepares for war against ${defender.name}`);\n    \n    let probability_of_successful_attack = probabilityOfSuccessfulAttack(attacker, target_community, all_polities)\n    if(probability_to_repel_attack === null) {\n      probability_to_repel_attack = 1 - probability_of_successful_attack\n    }\n    const attack_succeeds = !attackRepelled(probability_to_repel_attack)\n    if (attack_succeeds) {\n      console.log('WAR: ', `${attacker.name} succeeds in battle against ${target_community.name}`);\n      decreaseResourceBy(\n        costOfSuccessfulAttack(probability_of_successful_attack), \n        [\n          attacker.id,\n          // defender.id,\n          target_community.id,\n        ], \n        all_polities\n      )\n      annexTarget(attacker, target_community, all_polities)\n      reorganizeInternalPolities(attacker, all_polities)\n      probability_to_repel_attack -= ((1 - LOSER_EFFECT) * probability_to_repel_attack)\n      // if (defender.chief !== attacker.id) {\n      if (getChiefPolity(defender, all_polities).id !== attacker.id) {\n        console.log('WAR: ', `${attacker.name}'s onslaught continues against ${defender.name}`);\n        goToWar(attacker, defender, probability_to_repel_attack, all_polities)\n      }\n    } else {\n      console.log('WAR: ', `${attacker.name} fails in battle against ${target_community.name}`);\n      decreaseResourceBy(\n        costOfUnsuccessfulAttack(probability_of_successful_attack),\n        [\n          attacker.id, \n          // defender.id,\n          target_community.id,\n        ],\n        all_polities\n      )\n    }\n  }\n}\n\nconst attackRepelled = (probability_to_repel_attack) => {\n  return Math.random() <= probability_to_repel_attack\n}\n\nconst probabilityOfSuccessfulAttack = (polity, neighbor, all_polities) => {\n  const p1 = Math.pow(getPower(polity, all_polities), MILITARY_DETERMINISM)\n  const p2 = Math.pow(getPower(neighbor, all_polities), MILITARY_DETERMINISM)\n  const res = p1 / (p1 + p2) \n  return res;\n}\n\nconst probabilityPolityWillAttack = (polity, probability_of_successful_attack, cost_of_successful_attack) => {\n  let result = probability_of_successful_attack * Math.exp((-1 * WILLINGNESS_TO_ATTACK) * cost_of_successful_attack) * (polity.resource_level / polity.baseline_resource_level)\n  return result;\n}\n\nconst costOfSuccessfulAttack = (probability_of_successful_attack) => {\n  return RESOURCE_BASELINE_DEVIATION * (1 - probability_of_successful_attack);\n}\n\nconst costOfUnsuccessfulAttack = (probability_of_successful_attack) => {\n  return RESOURCE_BASELINE_DEVIATION * probability_of_successful_attack;\n}\n\nconst decreaseResourceBy = (value, ids, all_polities) => {\n  all_polities.forEach(p => {\n    if (ids.indexOf(p.id) > -1) {\n      p.resource_level = Math.max(0, p.resource_level - value)\n    }\n  });\n}\n\nconst increaseResourceBy = (value, ids, all_polities) => {\n  all_polities.forEach(p => {\n    if (ids.indexOf(p.id) > -1) {\n      p.resource_level += value\n    }\n  });\n}\n\nexport const getPower = (polity, all_polities) => {\n  const subordinates = getImmediateSubordinates(polity, all_polities)\n  let res = subordinates.reduce(\n      (acc, curr) => {\n        return acc + (curr.resource_level * TRIBUTE_LEVEL)\n      },\n      0\n    )\n  return res + polity.resource_level\n}\n\nexport const getAllSubordinates = (polity, all_polities) => {\n  return all_polities.filter((p) => (p.id !== polity.id) && (getChiefPolity(p, all_polities).id === polity.id));\n}\n\nexport const getImmediateSubordinates = (polity, all_polities) => {\n  return all_polities.filter((p) => (p.id !== polity.id) && (p.chief === polity.id));\n}\n\nexport const getChiefPolity = (polity, all_polities) => {\n  let chief_polity = false;\n  let result = [];\n  \n  if (polity.chief !== null) {\n    result = all_polities.filter((p) => {\n      return (p.id === polity.chief)\n    });\n  }\n\n\n  if (result.length > 0) {\n    chief_polity = result[0];\n  }\n    \n  if (chief_polity) {\n    return getChiefPolity(chief_polity, all_polities);\n  } else {\n    return polity;\n  }\n\n}\n\nconst getImmediateChief = (polity, all_polities) => {\n  const result = all_polities.filter((p) => polity.chief === p.id);\n  return result.length > 0 ? result[0] : false;\n}\n\nexport function createPolity() {\n  const baseline_resource_level = 1 + (getRandomIntInclusive(-1, 1) * RESOURCE_BASELINE_DEVIATION)\n\n  let polity = {\n    id: uuid(),\n    name: composeName([namePrefixes, nameSuffixes]),\n    baseline_resource_level,\n    resource_level: baseline_resource_level,\n    chief: null,\n    coordinates: {\n      x: getRandomIntInclusive(0, GRID_SIZE),\n      y: getRandomIntInclusive(0, GRID_SIZE)\n    },\n    has_incurred_secession: false,\n    has_incurred_war: false,\n    chief_age: 30,\n    color: Konva.Util.getRandomColor(),\n  }\n  return polity;\n}\n\nconst immuneToViolence = (polity) => polity.has_incurred_secession && polity.has_incurred_war;\n\nconst namePrefixes = [\n  'Moon',\n  'Sun',\n  'Black',\n  'White',\n  'Light',\n  'Shadow',\n  'Red',\n  'Green',\n  'Gray',\n  'Mighty',\n  'Wither',\n  'Gale',\n  'Hay',\n  'Stone',\n  'River',\n]\n\nconst nameSuffixes = [\n  'Fire',\n  'Water',\n  'Belly',\n  'Peaks',\n  'Born',\n  'Still',\n  'Wood',\n  'Wine',\n  'Run',\n  'Guard',\n  'Fell',\n  'Fall',\n]\n\nconst composeName = (namePartLists = []) => {\n  return namePartLists.map((list) => getRandomInArray(list)).join(' ')\n}","import React from 'react';\nimport './App.css';\nimport * as StateGenerator from './lib/generators/state';\nimport * as Events from './lib/events';\nimport * as Cycling from './lib/turchin_cycling';\nimport { Stage, Layer, Rect, Text, Line, Group } from 'react-konva';\nimport Konva from 'konva';\n\nclass Histomap extends React.Component {\n\n  state = {\n    polities: Cycling.generatePolities(10),\n    offset_x: (window.innerWidth / 100) - 1,\n    offset_y: (window.innerHeight / 100) - 1,\n    base_size: 10,\n    size_multiplier: 20,\n  }\n\n  async componentDidMount () {\n    // let polities = [...this.state.polities];\n    console.table(this.state.polities);\n    // polities = await Cycling.run(polities, 300, 0);\n    // this.setState({polities});\n    // // console.table(this.state.polities);\n    // for (let i = 0; i < 100; i ++) {\n    //   let polities = await Cycling.run([...this.state.polities], 1, 1000);\n    //   this.setState({ polities });\n    // }\n  }\n\n  async step () {\n    let polities = await Cycling.run([...this.state.polities], 1, 0);\n    this.setState({ polities });\n    // console.table(polities);\n  }\n\n  render() {\n    const polities = this.state.polities.map((p, i) => {\n      const chief_pos_x = p.coordinates.x * this.state.offset_x\n      const chief_pos_y = p.coordinates.y * this.state.offset_y\n      const power = Cycling.getPower(p, this.state.polities)\n      const size = (this.state.size_multiplier * power) + this.state.base_size\n      const subordinate_lines = Cycling.getImmediateSubordinates(p, this.state.polities).map((subordinate, i) => {\n        return (\n          <Group>\n            <Line\n              key={i + 'b'}\n              x={0}\n              y={0}\n              points={[\n                chief_pos_x, \n                chief_pos_y, \n                // chief_pos_x + 20, \n                // chief_pos_y + 20, \n                subordinate.coordinates.x * this.state.offset_x, \n                subordinate.coordinates.y * this.state.offset_y\n              ]}\n              stroke={Cycling.getChiefPolity(p, this.state.polities).color}\n              // stroke={p.color}\n              tension={1}\n              strokeWidth={4}\n            />\n          </Group>\n        )\n      })\n      return (\n        <Group key={i}>\n          <Text\n            x={chief_pos_x}\n            y={chief_pos_y + 40}\n            text={p.name}\n            fill='red'\n            fontSize={20}\n          />\n          <Text\n            x={chief_pos_x}\n            y={chief_pos_y - 20}\n            text={Math.round(power * 100) / 100}\n            fill='red'\n            fontSize={20}\n          />\n          <Rect\n            x={chief_pos_x}\n            y={chief_pos_y}\n            width={size}\n            height={size}\n            fill={p.color}\n            shadowBlur={5}\n          />\n          {subordinate_lines}\n        </Group>\n      )\n    })\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Rect\n            x={20}\n            y={20}\n            width={100}\n            height={50}\n            fill={'red'}\n            onClick={() => this.step()}\n          />\n          <Text\n            x={50}\n            y={40}\n            text={'Step'}\n            fill='black'\n            fontSize={20}\n          />\n          {polities}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Histomap;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Histomap from './Histomap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>Histomap</h2>\n      </div> */}\n        <Histomap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}