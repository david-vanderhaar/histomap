{"version":3,"sources":["logo.svg","lib/helper.js","lib/turchin_cycling.js","histomap/ChartView.js","histomap/NodeView.js","Histomap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getRandomIntInclusive","min","max","Math","ceil","floor","random","RESOURCE_BASELINE_DEVIATION","GRID_SIZE","NEIGHBOR_DISTANCE","run","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","polities","steps_to_run","step_interval","i","_args","arguments","wrap","_context","prev","next","length","undefined","console","log","concat","map","polity","makeDecision","delay","abrupt","stop","_x","_x2","apply","this","generatePolities","amount","push","createPolity","electChief","all_polities","forEach","id","chief_age","upkeep","has_died","addEvent","name","hasChiefDied","subordinates","getImmediateSubordinates","amount_to_secede","s","secede","dismantlePolity","chief","victim","findWeakestNeighborPolity","willGoToWar","goToWar","havePeace","chief_polity","getChiefPolity","willSecede","attemptRebellion","neighbor_chiefs","getNeighborCommunities","filter","c","immuneToViolence","sort","b","getPower","isInRangeOfChiefOrSubordinates","toConsumableArray","getAllSubordinates","reduce","acc","curr","hypot","coordinates","x","y","reorganizeInternalPolities","annex_pairs","target","pair","has_incurred_secession","has_incurred_war","neighbor","P","probabilityOfSuccessfulAttack","costOfSuccessfulAttack","probabilityPolityWillAttack","subordinate","probability_to_repel_attack","probability_of_successful_attack","attackRepelled","decreaseResourceBy","costOfUnsuccessfulAttack","increaseResourceBy","sign","baseline_resource_level","resource_level","attacker","defender","target_community","neighbor_communities","findWealthiestBorderCommunity","target_subordinate_ids","t","indexOf","annexTarget","p1","pow","cost_of_successful_attack","exp","value","ids","result","type","message","events","event","EVENT_TYPES","createEvent","DEFAULT","color","DECISION","WAR","PEACE","SECESSION","ANNEX","DEATH","DISMANTLE","IMPASSE","getPolityPercentages","total_communities","percent","polity_id","getEvents","uuid","composeName","namePrefixes","nameSuffixes","Konva","Util","getRandomColor","list","array","join","ChartView","React","Component","state","step_distance","entity_distance","offset_x","offset_y","previous_polity_power","padding_right","event_text_width","_this2","lines","props","all_historical_polities","points","history","step","j","all_previous_percents","percents","slice","percentage","per","width","line","chart_pos_x","chart_pos_y","chart_height","height","react_default","createElement","ReactKonva","draggable","dragBoundFunc","pos","text","fill","fontSize","round","Cycling","k","extra_points","l","key","stroke","tension","strokeWidth","closed","reverse","x_end","x_begin","polity_events","e","event_log","Histomap","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","innerWidth","innerHeight","table","setState","onClick","histomap_ChartView","App","className","src_Histomap","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f09300d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.43f13564.svg\";","export function getRandomIntInclusive (min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getRandomInArray (array) {\n  return array.length > 0 \n    ? array[getRandomIntInclusive(0, array.length - 1)]\n    : null\n}","import { getRandomIntInclusive, getRandomInArray } from \"./helper\";\nimport uuid from 'uuid/v1';\nimport { delay } from \"q\";\nimport Konva from 'konva';\n\n/*\n----------------------\n      VARIABLES\n----------------------\nMajor model parameters and statistics\nS = System edge size\nMILITARY_DETERMINISM = Scaling exponent (of the polity power to the probability of a win)\nRESOURCE_BASELINE_DEVIATION = Standard deviation of the baseline resource level\nTRIBUTE_LEVEL = Tribute level\nWILLINGNESS_TO_ATTACK = a variable > 0\nMAX_CONTROL = Span of control (the maximum number of subordinate polities)\nCHIEF_LIFE_EXPECTANCY = The expected time in power of the paramount chief\nmax_s = Relative size of the largest polity\nc = Mean complexity\nmax_c = Maximum complexity\nρ = Average centrality (i.e. the ratio of the power of the chief village and the one immediately below)\n\nCustom model parameters\nN = initial number of polities to create\nC = max number of connection to other nodes\nY = number of time steps to run\ntime_step = current step in time\n\n----------------------\n      TODO's\n----------------------\nCreate visual log of polity actions\n\nCreate area interpretation which breaks the screen into chunks and \ncolor codes swathes of land via the chief polity (shapes)\n\nCreate Histomap graph (printable, scrollable) which includes power shifts and significant events\n\nDONE - There is a chance t every time_step that the paramount chief dies, \nresulting in peacful annexation of a random set of subordinate polities\n\nDONE - if a polity has been warred against or seceded from, they can not be a target for war until the next year.\n\nwhen polities secede, they should acquire a portion of the resources of the chief polity (MAYBE)\n\nDONE - when polity id captured, if it has subordinates, they should become independant\n\nDONE - find neighbors to attack should target any polities with range of current chief and any of their subordinates\n\nDONE - BUG - nest goToWar function uses undefined target\n\n*/\n\nconst TRIBUTE_LEVEL = 0.5 // Math.random();\nconst LOSER_EFFECT = 0.2 // Math.random();\nconst CHIEF_LIFE_EXPECTANCY = 1000;\nconst MAX_CONTROL = 4;\nconst RESOURCE_BASELINE_DEVIATION = 0.2 //Math.random();\nconst MILITARY_DETERMINISM = 2 //getRandomIntInclusive(1, 2);\nconst WILLINGNESS_TO_ATTACK = 2\nconst RESOURCE_RECOVERY_TIME =  3 //getRandomIntInclusive(5, 15);\nconst GRID_SIZE = 100\nconst NEIGHBOR_DISTANCE = GRID_SIZE\n// const NEIGHBOR_DISTANCE = GRID_SIZE / 3\n\nexport const run = async (polities, steps_to_run, step_interval = 0) => {\n  for (let i = 0; i < steps_to_run; i++) {\n    console.log(`%cTIME_STEP: ${i}`, \"color: yellow; font-style: italic; background-color: blue;padding: 2px\");\n    polities\n    // .filter((polity) => polity.chief === null)\n    .map((polity) => makeDecision(polity, polities));\n    await delay(step_interval);\n  }\n  \n  return polities;  \n}\n\nexport const generatePolities = (amount) => {\n  let polities = [];\n  for (let i = 0; i < amount; i++) {\n    polities.push(createPolity());\n  }\n  return polities;\n}\n\nconst hasChiefDied = (polity, all_polities) => {\n  const has_died = Math.random() <= (polity.chief_age / CHIEF_LIFE_EXPECTANCY) - 0.3\n  if (has_died) {\n    // console.log(`DEATH: ${polity.name}'s Chief has died`)\n    addEvent('DEATH', `${polity.name}'s Chief has died.`, [polity.id], all_polities)\n  }\n  return has_died;\n}\n\nconst generateChiefAge = () => getRandomIntInclusive(12, 45);\n\nconst electChief = (polity, all_polities) => {\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      p.chief_age = generateChiefAge();\n    }\n  });\n}\n\nconst dismantlePolity = (polity, all_polities) => {\n  const subordinates = getImmediateSubordinates(polity, all_polities)\n  const amount_to_secede = getRandomIntInclusive(0, subordinates.length);\n  // console.log(`DISMANTLE: ${amount_to_secede} communities have decided to leave ${polity.name}.`)\n  addEvent('DISMANTLE', `${amount_to_secede} communities have decided to leave ${polity.name}.`, [polity.id], all_polities)\n  subordinates.map((s, i) => {\n    if (i <= amount_to_secede - 1) {\n      secede(s, all_polities);\n    }\n  })\n}\n\nconst makeDecision = (polity, all_polities) => {\n  upkeep(polity, all_polities);\n  if (hasChiefDied(polity, all_polities)) {\n    dismantlePolity(polity, all_polities);\n    electChief(polity, all_polities);\n  } else {\n    // consider allowing all polities that have subs, make this decision\n    if (polity.chief === null) {\n      // console.log('DECISION: ', `The chief polity ${polity.name} deliberates`)\n      addEvent('DECISION', `The chief polity ${polity.name} deliberates`, [polity.id], all_polities)\n      let victim = findWeakestNeighborPolity(polity, all_polities)\n      if (victim && willGoToWar(polity, victim, all_polities)) {\n        goToWar(polity, victim, null, all_polities)\n      } else {\n        havePeace(polity, all_polities);\n      }\n    } else {\n      // rebelling polities rebel against immediate chief\n      // const chief_polity = getImmediateChief(polity, all_polities);\n  \n      // rebelling polities rebel against paramount chief\n      const chief_polity = getChiefPolity(polity, all_polities);\n      // console.log('DECISION: ', `${chief_polity.name}'s subordinate polity ${polity.name} deliberates`)\n      addEvent('DECISION', `${chief_polity.name}'s subordinate polity ${polity.name} deliberates`, [polity.id], all_polities)\n      if (willSecede(chief_polity, polity, all_polities)) {\n        attemptRebellion(chief_polity, polity, all_polities);\n      } else {\n        havePeace(polity, all_polities);\n      }\n    }\n  }\n\n  return polity;\n}\n\nconst findWeakestNeighborPolity = (polity, all_polities) => {\n  let neighbor_communities = getNeighborCommunities(polity, all_polities)\n    .filter((c) => !immuneToViolence(c))\n    // .filter((c) => !c.has_incurred_secession)\n  \n  const neighbor_chiefs = \n    neighbor_communities\n    .map((p) => getChiefPolity(p, all_polities))\n    .sort((a, b) => getPower(a, all_polities) - getPower(b, all_polities))\n  \n  return neighbor_chiefs.length > 0 ? neighbor_chiefs[0] : false;\n}\n\nconst isInRange = (a, b) => {\n  return (\n    NEIGHBOR_DISTANCE >= Math.hypot(\n      b.coordinates.x - a.coordinates.x,\n      b.coordinates.y - a.coordinates.y\n    )\n  )\n}\n\nlet isInRangeOfChiefOrSubordinates = (chief, victim, all_polities) => {\n  return (\n    [\n      chief,\n      ...getAllSubordinates(chief, all_polities)\n    ].reduce((acc, curr) => acc + isInRange(victim, curr),\n      0\n    )\n  )\n}\n\nconst getNeighborCommunities = (polity, all_polities) => {\n  return all_polities.filter((p) => {\n    return (\n      getChiefPolity(p, all_polities).id !== polity.id\n      && p.id !== polity.id\n      && isInRangeOfChiefOrSubordinates(polity, p, all_polities)\n    );\n  });\n}\n\nconst findWealthiestBorderCommunity = (attacker, defender, all_polities) => {\n  // need to account for adjacency\n  let neighbor_communities = []\n\n  if (getAllSubordinates(defender, all_polities).length > 0) {\n    neighbor_communities =\n      getNeighborCommunities(attacker, all_polities)\n      .filter((p) => getChiefPolity(p, all_polities).id === defender.id)\n      .sort((a, b) => getPower(b, all_polities) - getPower(a, all_polities))\n  } else {\n    // neighbor_communities = [defender]\n    neighbor_communities =\n      getNeighborCommunities(attacker, all_polities)\n      .filter((p) => p.id === defender.id)\n  }\n\n  return neighbor_communities.length > 0 ? neighbor_communities[0] : false;\n}\n\nconst reorganizeInternalPolities = (chief, all_polities) => {\n  let annex_pairs = [];\n  const subordinates = getAllSubordinates(chief, all_polities)\n    .sort((a, b) => getPower(b, all_polities) - getPower(a, all_polities))\n  if (subordinates.length > MAX_CONTROL) {\n    subordinates.map((s, i) => {\n      if (i >= MAX_CONTROL) {\n        annex_pairs.push({ chief: subordinates[i - MAX_CONTROL], target: s})\n      } else {\n        annex_pairs.push({chief, target: s})\n      }\n    })\n  }\n  annex_pairs.map((pair) => {\n    all_polities.forEach(p => {\n      if (p.id === pair.target.id) {\n        p.chief = pair.chief.id\n      }\n    })\n  })\n}\n\nconst annexTarget = (chief, target, all_polities) => {\n  // console.log('ANNEX: ', `${target.name} is annexed by ${chief.name}.`);\n  // addEvent('ANNEX', `${target.name} is annexed by ${chief.name}.`, [chief.id, target.id], all_polities)\n  const target_subordinate_ids = getImmediateSubordinates(target, all_polities).map((t) => t.id);\n  all_polities.forEach(p => {\n    if (p.id === target.id) {\n      p.chief = chief.id\n    }\n    // immediate subordinates of target polity should become free\n    if (target_subordinate_ids.indexOf(p.id) > -1) {\n      p.chief = null\n    }\n  });\n}\n\nconst secede = (polity, all_polities) => {\n  const chief = getChiefPolity(polity, all_polities);\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      // console.log(`SECESSION: ${p.name} is seceded from ${chief.name}.`)\n      addEvent('SECESSION', `${p.name} is seceded from ${chief.name}.`, [p.id, chief.id], all_polities)\n      p.chief = null;\n    } else if (p.id === chief.id) {\n      p.has_incurred_secession = true;\n    }\n  });\n}\n\nconst upkeep = (polity, all_polities) => {\n  all_polities.forEach(p => {\n    if (p.id === polity.id) {\n      p.has_incurred_secession = false;\n      p.has_incurred_war = false;\n      p.chief_age += 1;\n    }\n  });\n}\n\nconst willGoToWar = (polity, neighbor, all_polities) => {\n  const P = probabilityOfSuccessfulAttack(polity, neighbor, all_polities);\n  const c = costOfSuccessfulAttack(P);\n  return Math.random() <= probabilityPolityWillAttack(polity, P, c);\n}\n\nconst willSecede = (chief, subordinate, all_polities) => {\n  // console.log(subordinate);\n  const probability_to_repel_attack = 1 - probabilityOfSuccessfulAttack(chief, subordinate, all_polities)\n  return Math.random() <= probability_to_repel_attack;\n}\n\nconst attemptRebellion = (chief, subordinate, all_polities) => {\n  // console.log('REBELLION: ', `${subordinate.name} attempts rebellion against ${chief.name}.`);\n  addEvent('REBELLION', `${subordinate.name} attempts rebellion against ${chief.name}.`, [subordinate.id], all_polities);\n  let probability_of_successful_attack = probabilityOfSuccessfulAttack(chief, subordinate, all_polities)\n  let probability_to_repel_attack = 1 - probability_of_successful_attack\n  const rebellion_succeeds = attackRepelled(probability_to_repel_attack)\n  if (rebellion_succeeds) {\n    // console.log('REBELLION: ', `${subordinate.name} succeeds.`);\n    addEvent('REBELLION', `${subordinate.name} succeeds in rebellion against ${chief.name}.`, [subordinate.id], all_polities);\n    decreaseResourceBy(\n      costOfUnsuccessfulAttack(probability_of_successful_attack),\n      [\n        chief.id, \n        subordinate.id\n      ],\n      all_polities\n    )\n    secede(subordinate, all_polities);\n    // reorganizeInternalPolities(chief, all_polities)\n    reorganizeInternalPolities(getChiefPolity(chief), all_polities)\n  } else {\n    // console.log('REBELLION: ', `${subordinate.name} fails.`);\n    addEvent('REBELLION', `${subordinate.name} fails in rebellion against ${chief.name}.`, [subordinate.id], all_polities);\n    decreaseResourceBy(\n      costOfSuccessfulAttack(probability_of_successful_attack),\n      [\n        chief.id, \n        subordinate.id\n      ],\n      all_polities\n    )\n  }\n}\n\nconst havePeace = (polity, all_polities) => {\n  // console.log('PEACE: ', `${polity.name} has peace.`);\n  addEvent('PEACE', `${polity.name} has peace.`, [polity.id], all_polities);\n  increaseResourceBy(\n    Math.sign(polity.baseline_resource_level - polity.resource_level) * (polity.baseline_resource_level / RESOURCE_RECOVERY_TIME),\n    [polity.id],\n    all_polities\n  )\n}\n\nconst goToWar = (attacker, defender, probability_to_repel_attack = null, all_polities) => {\n  let target_community = findWealthiestBorderCommunity(attacker, defender, all_polities);\n  if (!target_community) {\n    // console.log(`IMPASSE: ${defender.name} has no communities with reach of ${attacker.name}'s assualt.`);\n    addEvent('IMPASSE', `${defender.name} has no communities with reach of ${attacker.name}'s assualt.`, [attacker.id], all_polities);\n  } else {\n    // console.log('WAR: ', `${attacker.name} prepares for war against ${defender.name}`);\n    addEvent('WAR', `${attacker.name} prepares for war against ${defender.name}`, [attacker.id], all_polities);\n    \n    let probability_of_successful_attack = probabilityOfSuccessfulAttack(attacker, target_community, all_polities)\n    if(probability_to_repel_attack === null) {\n      probability_to_repel_attack = 1 - probability_of_successful_attack\n    }\n    const attack_succeeds = !attackRepelled(probability_to_repel_attack)\n    if (attack_succeeds) {\n      // console.log('WAR: ', `${attacker.name} succeeds in battle against ${target_community.name}`);\n      addEvent('WAR', `${attacker.name} succeeds in battle against ${target_community.name}`, [attacker.id], all_polities);\n      decreaseResourceBy(\n        costOfSuccessfulAttack(probability_of_successful_attack), \n        [\n          attacker.id,\n          // defender.id,\n          target_community.id,\n        ], \n        all_polities\n      )\n      annexTarget(attacker, target_community, all_polities)\n      reorganizeInternalPolities(attacker, all_polities)\n      probability_to_repel_attack -= ((1 - LOSER_EFFECT) * probability_to_repel_attack)\n      // if (defender.chief !== attacker.id) {\n        if (getChiefPolity(defender, all_polities).id !== attacker.id) {\n        // console.log('WAR: ', `${attacker.name}'s onslaught continues against ${defender.name}`);\n        addEvent('WAR', `${attacker.name}'s onslaught continues against ${defender.name}`, [attacker.id], all_polities);\n        goToWar(attacker, defender, probability_to_repel_attack, all_polities)\n      }\n    } else {\n      // console.log('WAR: ', `${attacker.name} fails in battle against ${target_community.name}`);\n      addEvent('WAR', `${attacker.name} fails in battle against ${target_community.name}`, [attacker.id], all_polities);\n      decreaseResourceBy(\n        costOfUnsuccessfulAttack(probability_of_successful_attack),\n        [\n          attacker.id, \n          // defender.id,\n          target_community.id,\n        ],\n        all_polities\n      )\n    }\n  }\n}\n\nconst attackRepelled = (probability_to_repel_attack) => {\n  return Math.random() <= probability_to_repel_attack\n}\n\nconst probabilityOfSuccessfulAttack = (polity, neighbor, all_polities) => {\n  const p1 = Math.pow(getPower(polity, all_polities), MILITARY_DETERMINISM)\n  const p2 = Math.pow(getPower(neighbor, all_polities), MILITARY_DETERMINISM)\n  const res = p1 / (p1 + p2) \n  return res;\n}\n\nconst probabilityPolityWillAttack = (polity, probability_of_successful_attack, cost_of_successful_attack) => {\n  let result = probability_of_successful_attack * Math.exp((-1 * WILLINGNESS_TO_ATTACK) * cost_of_successful_attack) * (polity.resource_level / polity.baseline_resource_level)\n  return result;\n}\n\nconst costOfSuccessfulAttack = (probability_of_successful_attack) => {\n  return RESOURCE_BASELINE_DEVIATION * (1 - probability_of_successful_attack);\n}\n\nconst costOfUnsuccessfulAttack = (probability_of_successful_attack) => {\n  return RESOURCE_BASELINE_DEVIATION * probability_of_successful_attack;\n}\n\nconst decreaseResourceBy = (value, ids, all_polities) => {\n  all_polities.forEach(p => {\n    if (ids.indexOf(p.id) > -1) {\n      p.resource_level = Math.max(0, p.resource_level - value)\n    }\n  });\n}\n\nconst increaseResourceBy = (value, ids, all_polities) => {\n  all_polities.forEach(p => {\n    if (ids.indexOf(p.id) > -1) {\n      p.resource_level += value\n    }\n  });\n}\n\nexport const getPower = (polity, all_polities) => {\n  const subordinates = getImmediateSubordinates(polity, all_polities)\n  let res = subordinates.reduce(\n      (acc, curr) => {\n        return acc + (curr.resource_level * TRIBUTE_LEVEL)\n      }, 0)\n  return res + polity.resource_level\n}\n\nexport const getTotalPower = (polities, all_polities) => {\n  return polities.reduce(\n    (acc, curr) => {\n      return acc + getPower(curr, all_polities)\n    }, 0)\n}\n\nexport const getAllSubordinates = (polity, all_polities) => {\n  return all_polities.filter((p) => (p.id !== polity.id) && (getChiefPolity(p, all_polities).id === polity.id));\n}\n\nexport const getImmediateSubordinates = (polity, all_polities) => {\n  return all_polities.filter((p) => (p.id !== polity.id) && (p.chief === polity.id));\n}\n\nexport const getChiefPolity = (polity, all_polities) => {\n  let chief_polity = false;\n  let result = [];\n  \n  if (polity.chief !== null) {\n    result = all_polities.filter((p) => {\n      return (p.id === polity.chief)\n    });\n  }\n\n\n  if (result.length > 0) {\n    chief_polity = result[0];\n  }\n    \n  if (chief_polity) {\n    return getChiefPolity(chief_polity, all_polities);\n  } else {\n    return polity;\n  }\n\n}\n\nconst getImmediateChief = (polity, all_polities) => {\n  const result = all_polities.filter((p) => polity.chief === p.id);\n  return result.length > 0 ? result[0] : false;\n}\n\nconst createEvent = (type = 'DEFAULT', message = '') => {\n  const event = EVENT_TYPES[type]; \n  return { event, message }\n}\n\nconst addEvent = (type, message, ids, all_polities) => {\n  all_polities.forEach(p => {\n    if (ids.indexOf(p.id) > -1) {\n      p.events = p.events.concat(createEvent(type, message))\n    }\n  });\n}\n\nexport const EVENT_TYPES = {\n  DEFAULT: {\n    color: 'gray',\n  },\n  DECISION: {\n    color: 'green',\n  },\n  WAR: {\n    color: 'red',\n  },\n  PEACE: {\n    color: 'blue',\n  },\n  SECESSION: {\n    color: 'yellow',\n  },\n  ANNEX: {\n    color: 'orange',\n  },\n  DEATH: {\n    color: 'purple',\n  },\n  DISMANTLE: {\n    color: 'gray',\n  },\n  IMPASSE: {\n    color: 'gray',\n  },\n}\n\nexport const getPolityPercentages = (polities) => {\n  const total_communities = polities.length;\n  return polities.map((p) => {\n    let percent = (getAllSubordinates(p, polities).length) / total_communities\n    return { percent, polity_id: p.id }\n  })\n}\n\nexport const getEvents = (polities) => {\n  return polities.map((p) => {\n    return {events: [...p.events], polity_id: p.id}\n  })\n}\n\nexport const getPowerPercentages = (polities) => {\n  const total_power = getTotalPower(polities, polities)\n  return polities.map((p) => {\n    let percent = (getPower(p, polities) / total_power)\n    return { percent, polity_id: p.id }\n  })\n}\n\nexport function createPolity() {\n  const baseline_resource_level = 1 + (getRandomIntInclusive(-1, 1) * RESOURCE_BASELINE_DEVIATION)\n\n  let polity = {\n    id: uuid(),\n    name: composeName([namePrefixes, nameSuffixes]),\n    baseline_resource_level,\n    resource_level: baseline_resource_level,\n    chief: null,\n    coordinates: {\n      x: getRandomIntInclusive(0, GRID_SIZE),\n      y: getRandomIntInclusive(0, GRID_SIZE)\n    },\n    has_incurred_secession: false,\n    has_incurred_war: false,\n    chief_age: 30,\n    events: [],\n    color: Konva.Util.getRandomColor(),\n  }\n  return polity;\n}\n\nconst immuneToViolence = (polity) => polity.has_incurred_secession && polity.has_incurred_war;\n\nconst namePrefixes = [\n  'Moon',\n  'Sun',\n  'Black',\n  'White',\n  'Light',\n  'Shadow',\n  'Red',\n  'Green',\n  'Gray',\n  'Mighty',\n  'Wither',\n  'Gale',\n  'Hay',\n  'Stone',\n  'River',\n]\n\nconst nameSuffixes = [\n  'Fire',\n  'Water',\n  'Belly',\n  'Peaks',\n  'Born',\n  'Still',\n  'Wood',\n  'Wine',\n  'Run',\n  'Guard',\n  'Fell',\n  'Fall',\n]\n\nconst composeName = (namePartLists = []) => {\n  return namePartLists.map((list) => getRandomInArray(list)).join(' ')\n}","import React from 'react';\nimport '../App.css';\nimport * as Cycling from '../lib/turchin_cycling';\nimport { Stage, Layer, Circle, Text, Line, Group } from 'react-konva';\n\nclass ChartView extends React.Component {\n  state = {\n    // step_distance: 30,\n    step_distance: 100,\n    entity_distance: 40,\n    offset_x: 160,\n    offset_y: 25,\n    previous_polity_power: 0,\n    padding_right: 20,\n    event_text_width: 60,\n  }\n\n  render() {\n    let lines = this.props.all_historical_polities.map((p) => {\n      return {\n        polity: p,\n        points: [],\n      }\n    });\n\n    this.props.history.map((step, i) => {\n      step.polities.map((polity, j) => {\n        const all_previous_percents = j > 0\n          ? step.percents.slice(0, j).reduce((acc, curr) => acc + curr.percent, 0)\n          : 0\n        const percentage = step.percents.filter((per) => per.polity_id === polity.id)[0].percent\n        const x = ((this.props.width - this.state.offset_x) * (percentage + all_previous_percents))\n        const y = i * this.state.step_distance\n\n        lines = lines.map((line) => {\n          if (line.polity.id === polity.id) {\n            line.points = [...line.points, x, y]\n          }\n          return line\n        })\n      })\n    })\n\n    let chart_pos_x = this.state.offset_x;\n    let chart_pos_y = this.state.offset_y;\n    let chart_height = this.props.history.length * this.state.step_distance;\n\n    if (chart_height >= (this.props.height - this.state.offset_y)) {\n      chart_pos_y = (this.state.offset_y - chart_height) + (this.props.height - this.state.step_distance);\n    }\n\n    return (\n      <Group>\n        <Group\n          draggable={true}\n          dragBoundFunc={\n            (pos) => {\n              return {\n                x: 0,\n                y: Math.min(0, pos.y)\n              }\n            }\n          }\n        >\n          {\n            this.props.polities.map((p, i) => {\n              return (\n                <Group>\n                  <Text\n                    x={20}\n                    y={100 + (i * 50)}\n                    text={p.name}\n                    fill={p.color}\n                    fontSize={20}\n                    />\n                  <Text\n                    x={20}\n                    y={120 + (i * 50)}\n                    text={Math.round(Cycling.getPower(p, this.props.polities) * 100) / 100}\n                    fill={p.color}\n                    fontSize={20}\n                  />\n                </Group>\n              )\n            })\n          }\n        </Group>\n        <Group \n          x={chart_pos_x} \n          y={chart_pos_y}\n          draggable={true}\n          dragBoundFunc={\n            (pos) => {\n              return {\n                x: this.state.offset_x,\n                y: Math.min(this.state.offset_y, pos.y)\n              }\n            }\n          }\n        >\n          {\n            lines.map((line, k) => {\n              let extra_points = [];\n                this.props.history.forEach((step, l) => {\n                  if (l === this.props.history.length - 1) {\n                    extra_points = extra_points.concat([0, l * this.state.step_distance])\n                    extra_points = extra_points.concat([0, 0])\n                  }\n                })\n              return (\n                <Line\n                  key={k}\n                  x={0}\n                  y={0}\n                  points={line.points.concat(extra_points)}\n                  stroke={line.polity.color}\n                  tension={0}\n                  // bezier={true}\n                  strokeWidth={4}\n                  closed={true}\n                  fill={line.polity.color}\n                />\n              )\n            }).reverse()\n          }\n          {\n            this.props.history.map((step, i) => {\n              return (\n                <Line\n                  key={i}\n                  x={-5}\n                  y={0}\n                  points={[\n                    0, i * this.state.step_distance,\n                    this.props.width + this.state.offset_x, i * this.state.step_distance\n                  ]}\n                  stroke={'black'}\n                  tension={0}\n                  strokeWidth={2}\n                />\n              )\n            })\n          }\n          {\n            this.props.history.map((step, i) => {\n              \n              return step.polities.map((polity, j) => {\n                const all_previous_percents = j > 0\n                  ? step.percents.slice(0, j).reduce((acc, curr) => acc + curr.percent, 0)\n                  : 0\n                const percentage = step.percents.filter((per) => per.polity_id === polity.id)[0].percent\n                const x_end = ((this.props.width - this.state.offset_x) * (percentage + all_previous_percents))\n                const x_begin = ((this.props.width - this.state.offset_x) * (all_previous_percents))\n                const polity_events = step.events.filter((e) => e.polity_id === polity.id);\n                const event_log = polity_events.length > 0 ? polity_events[0].events : []\n                if (percentage > 0) {\n                  return (\n                    <Text\n                      key={j}\n                      x={x_begin + ((x_end - x_begin - (this.state.event_text_width / 2)) / 2)}\n                      // x={j * (this.props.width - this.state.offset_x) / 10}\n                      y={((i * this.state.step_distance))}\n                      width={this.state.event_text_width}\n                      // y={((i * this.state.step_distance) + (j * 20))}\n                      text={event_log.length > 0 ? event_log[event_log.length - 1].message : 'none'}\n                      fill={'white'}\n                      fontSize={10}\n                    />\n                  )\n                }\n              })\n            })\n          }\n        </Group>\n      </Group>\n    );\n  }\n}\n\nexport default ChartView;\n","import React from 'react';\nimport '../App.css';\nimport * as Cycling from '../lib/turchin_cycling';\nimport { Rect, Text, Line, Group } from 'react-konva';\n\nclass NodeView extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      offset_x: (props.width / 100) - 1,\n      offset_y: (props.height / 100) - 1,\n      base_size: 10,\n      size_multiplier: 20,\n    }\n  }\n\n  render() {\n    const polities = this.props.polities.map((p, i) => {\n      const chief_pos_x = p.coordinates.x * this.state.offset_x\n      const chief_pos_y = p.coordinates.y * this.state.offset_y\n      const power = Cycling.getPower(p, this.props.polities)\n      const size = (this.state.size_multiplier * power) + this.state.base_size\n      const subordinate_lines = Cycling.getImmediateSubordinates(p, this.props.polities).map((subordinate, i) => {\n        return (\n          <Group>\n            <Line\n              key={i + 'b'}\n              x={0}\n              y={0}\n              points={[\n                chief_pos_x,\n                chief_pos_y,\n                // chief_pos_x + 20, \n                // chief_pos_y + 20, \n                subordinate.coordinates.x * this.state.offset_x,\n                subordinate.coordinates.y * this.state.offset_y\n              ]}\n              stroke={Cycling.getChiefPolity(p, this.props.polities).color}\n              // stroke={p.color}\n              tension={1}\n              strokeWidth={4}\n            />\n          </Group>\n        )\n      })\n      return (\n        <Group key={i}>\n          <Text\n            x={chief_pos_x}\n            y={chief_pos_y + 40}\n            text={p.name}\n            fill='red'\n            fontSize={20}\n          />\n          <Text\n            x={chief_pos_x}\n            y={chief_pos_y - 20}\n            text={Math.round(power * 100) / 100}\n            fill='red'\n            fontSize={20}\n          />\n          <Rect\n            x={chief_pos_x}\n            y={chief_pos_y}\n            width={size}\n            height={size}\n            fill={p.color}\n            shadowBlur={5}\n          />\n          {subordinate_lines}\n        </Group>\n      )\n    })\n    return (\n      <Group>\n        {polities}\n      </Group>\n    );\n  }\n}\n\nexport default NodeView;\n","import React from 'react';\nimport './App.css';\nimport * as Cycling from './lib/turchin_cycling';\nimport NodeView from './histomap/NodeView';\nimport ChartView from './histomap/ChartView';\nimport { Stage, Layer, Rect, Text, Line, Group } from 'react-konva';\nimport { getRandomIntInclusive } from './lib/helper';\n\nclass Histomap extends React.Component {\n  constructor() {\n    super();\n    const polities = Cycling.generatePolities(20);\n    // const percents = Cycling.getPowerPercentages(polities);\n    const percents = Cycling.getPolityPercentages(polities);\n    const events = [];\n\n    this.state = {\n      polities: polities,\n      all_historical_polities: polities,\n      width: window.innerWidth - 40,\n      height: window.innerHeight,\n      history: [{polities, percents, events}],\n    }\n  }\n\n  async componentDidMount () {\n    // let polities = [...this.state.polities];\n    console.table(this.state.polities);\n    // polities = await Cycling.run(polities, 300, 0);\n    // this.setState({polities});\n    // // console.table(this.state.polities);\n    for (let i = 0; i < 50; i ++) {\n      await this.step(500);\n    }\n  }\n\n  async step (step_interval = 0) {\n    let polities = await Cycling.run([...this.state.polities], 1, step_interval);\n    // testing out when a polity is removed\n    // let random_index = getRandomIntInclusive(0, polities.length);\n    // polities = polities.filter((p, i) => i !== random_index)\n\n    // const percents = Cycling.getPowerPercentages(polities);\n    const percents = Cycling.getPolityPercentages(polities);\n    const events = Cycling.getEvents(polities);\n\n    const history = this.state.history.concat({polities, percents, events});\n    \n    this.setState({ polities, history });\n    // console.table(polities);\n  }\n\n  render() {\n    return (\n      <Stage width={this.state.width} height={this.state.height}>\n        <Layer>\n          <Rect\n            x={20}\n            y={20}\n            width={100}\n            height={50}\n            fill={'red'}\n            onClick={() => this.step()}\n          />\n          <Text\n            x={50}\n            y={40}\n            text={'Step'}\n            fill='black'\n            fontSize={20}\n          />\n        </Layer>\n        <Layer>\n          {/* <NodeView \n            polities={this.state.polities} \n            width={this.state.width} \n            height={this.state.height}\n          /> */}\n          <ChartView \n            polities={this.state.polities} \n            all_historical_polities={this.state.all_historical_polities} \n            history={this.state.history} \n            width={this.state.width} \n            height={this.state.height}\n          />\n        </Layer>\n      </Stage>\n    )\n  }\n}\n\nexport default Histomap;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Histomap from './Histomap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>Histomap</h2>\n      </div> */}\n        <Histomap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}